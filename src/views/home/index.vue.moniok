<template>
  <div class='container'>
    <!-- van-tabs v-model绑定频道列表的name属性值，如果没有name属性则绑定索引值
      swipeable 通过swipeable属性可以开启滑动切换标签页
      van-tabs__wrap 在van-tabs内不换行排列
    -->
    <van-tabs swipeable>
      <van-tab :key="index"
               v-for="index in 8"
               :title="'标签 ' + index">
        <div class="scroll-wrapper">
          <!-- 每个频道van-tab标签对应一组列表van-list
                  van-list的v-model 值loading为true表示加载进行中，为false时加载完毕
                  :finished全部数据加载完，没有可加载的数据时，true,如果还有数据就设置为false
                  finished-text="加载完成时的提示文字"
               -->
          <van-list v-model="loading"
                    :finished="finished"
                    :finished-text="finishedText"
                    @load="onLoad">
            <!-- 列表van-list中的单元van-cell
                      van-cell可以单用，也可以配合van-cell-group，van-cell-group可提供外框
                   -->
            <van-cell-group>
              <van-cell v-for="item in articleList"
                        :key="item"
                        :title="item" />
            </van-cell-group>
          </van-list>
        </div>
      </van-tab>
    </van-tabs>
  </div>
</template>

<script>
export default {
  name: 'home-index',
  data () {
    return {
      activeIndex: 0,
      loading: false,
      finished: false,
      finishedText: '',
      articleList: []
    }
  },
  methods: {
    // 加载文章列表
    async onLoad () {
      // 显示加载中
      this.loading = true
      let data = []
      try {
        // 模拟异步请求数据
        await window.setTimeout(() => {
          // 每次加载10条，从上次加载的最后+1位开始加载
          for (
            let i = this.articleList.length;
            i < this.articleList.length + 10;
            i++
          ) {
            // 每次加载数据放入data尾部，生成数组列表
            data.push(i + 1)
          }
          // 加载完成，赋值并修改loading状态
          this.articleList.push(...data)
          // 如果
          if (this.articleList.length === 50) {
            this.finished = true
            this.finishedText = '没有更多'
          }
          this.loading = false
        }, 2000)
      } catch (e) {
        return e
      }
    }
  },
  created () {
    this.onLoad()
  }
}
</script>

<style scoped lang='less'>
.van-tabs {
  height: 100%;
  display: flex;
  flex-direction: column;
  /deep/ .van-tabs__wrap {
    height: 36px;
    padding-right: 36px;
    .van-tab {
      line-height: 36px;
    }
    .van-tabs__line {
      background-color: #3296fa;
      height: 2px;
    }
  }
  /deep/ .van-tabs__content{
    flex: 1;
    overflow: hidden;
  }
  /deep/ .van-tab__pane{
    height: 100%;
    .scroll-wrapper{
      height: 100%;
      overflow-y: auto;
    }
  }
}
.bar_btn {
  width: 36px;
  height: 35px;
  position: absolute;
  top: 0;
  right: 0;
  &::before {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: 999;
    box-shadow: 0 0 10px #999;
    transform: scale(1, 0.6);
  }
  .van-icon-wap-nav {
    width: 100%;
    height: 100%;
    background: #fff;
    text-align: center;
    line-height: 35px;
    position: relative;
    z-index: 1000;
    &::before {
      font-size: 20px;
    }
  }
}
</style>
